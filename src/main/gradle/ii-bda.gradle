/**
 * Copyright 2016 interactive instruments GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.regex.Matcher

/**
 * etf build and deployment helper for gradle
 *
 * @author herrmann at interactive-instruments.de
 */

println 'ETF-BDA: Applying ii BDA gradle script to the project'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.3.4'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1"
    }
}

apply plugin: 'net.researchgate.release'
apply plugin: "com.github.hierynomus.license"


ext.versionFile = rootProject.file("./version.properties")

// Set and check project version
if (!ext.versionFile.exists()) {
    throw new GradleException("Required file version.properties does not exist! Create it!")
}
if (!ext.versionFile.canRead()) {
    throw new GradleException("Can not read file version.properties ! Check file permissions!")
}
def versionProperties = new Properties()
ext.versionFile.withInputStream {
    stream -> versionProperties.load(stream)
}
if (versionProperties.version == null) {
    throw new GradleException("Property version not set in file version.properties!")
}

def sTasks = project.gradle.startParameter.taskNames
if (versionProperties.version.toLowerCase().contains("snapshot")) {
    if(sTasks.contains('release') || sTasks.contains('runBuildTasks')) {
        // First case applies when you call release taks, second one is one of the tasks
        // that are executed in a NEW gradle instance
        println "ETF-BDA: Ignoring SNAPSHOT handling during RELEASE task execution."
        ext.snapshotSuffix = ""
    }else{
        ext.snapshotSuffix = "-SNAPSHOT"
    }
} else {
    ext.snapshotSuffix = ""
}

// Check credentials
if (!project.hasProperty("ii.etfdev.repo.username")) {
    throw new GradleException("Property ii.etfdev.repo.username not set!")
}
if (!project.hasProperty("ii.etfdev.repo.password")) {
    throw new GradleException("Property ii.etfdev.repo.password not set!")
}
ext.r_user = project.getProperty("ii.etfdev.repo.username")
ext.r_pwd = project.getProperty("ii.etfdev.repo.password")

println "ETF-BDA: Authenticating will be done as user ${ext.r_user}"

if (project.hasProperty("ii.etfdev.quality.reports")) {

}
ext.qualityReports = project.hasProperty("ii.etfdev.quality.reports") &&
        project.getProperty("ii.etfdev.quality.reports")=="true"

allprojects {

    apply plugin: 'java'
    apply plugin: 'maven'

    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'

    if(rootProject.qualityReports) {
        apply plugin: 'jacoco'
        apply plugin: 'jdepend'
    }

    version = versionProperties.version
    assert version != null
    ext.snapshotSuffix = gradle.rootProject.ext.snapshotSuffix
    assert ext.snapshotSuffix != null
    assert gradle.rootProject.ext.r_user != null
    assert gradle.rootProject.ext.r_pwd != null

    repositories {
        // First get modified external libraries
        maven {
            url "http://services.interactive-instruments.de/etfdev-af/ext-releases-local"
            credentials {
                username gradle.rootProject.ext.r_user
                password gradle.rootProject.ext.r_pwd
            }
        }
        maven {
            url "http://services.interactive-instruments.de/etfdev-af/ext-cache"
            credentials {
                username gradle.rootProject.ext.r_user
                password gradle.rootProject.ext.r_pwd
            }
        }
        mavenCentral()
        if(project.snapshotSuffix) {
            println "ETF-BDA: Activating local repository for SNAPSHOT version"
            mavenLocal()

            maven {
                url "http://services.interactive-instruments.de/etfdev-af/snapshot"
                credentials {
                    username gradle.rootProject.ext.r_user
                    password gradle.rootProject.ext.r_pwd
                }
            }
        }else{
            maven {
                url "http://services.interactive-instruments.de/etfdev-af/release"
                credentials {
                    username gradle.rootProject.ext.r_user
                    password gradle.rootProject.ext.r_pwd
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    checkstyle {
        ignoreFailures = true
        toolVersion = "6.14"
        configFile = rootProject.file('./build/gradle/checkstyle.xml')
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = true
        effort = "max"
        reportLevel = "high"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://services.interactive-instruments.de/etfdev-af/snapshot") {
                    authentication(userName: gradle.rootProject.ext.r_user, password: gradle.rootProject.ext.r_pwd)
                }
                repository(url: "http://services.interactive-instruments.de/etfdev-af/release") {
                    authentication(userName: gradle.rootProject.ext.r_user, password: gradle.rootProject.ext.r_pwd)
                }
            }
        }
    }

    jar.doFirst {
        manifest {
            attributes(
                    'Implementation-Title': project.name,
                    'Implementation-Vendor': 'interactive instruments GmbH',
                    'Implementation-Vendor-Id': 'de.interactive_instruments',
                    'Implementation-Version': project.version,
                    'Built-By': gradle.rootProject.ext.r_user,
                    'Build-User': System.getProperty('user.name'),
                    'Build-Host': java.net.InetAddress.getLocalHost().getHostName(),
                    'Build-JDK': System.getProperty('java.version'),
                    'Build-Date': new Date().format('yyMMddHHmmss'),
                    'Build-Gradle': gradle.gradleVersion,
                    'Source-Compatibility': project.sourceCompatibility,
                    'Target-Compatibility': project.targetCompatibility,
            )
        }
    }

    license {

        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.vendor = 'interactive instruments GmbH'

        dryRun = true
        strictCheck = true
        useDefaultMappings = true
        skipExistingHeaders = true
        header = rootProject.file('./build/gradle/apache2-license-header.txt')

        excludes([
                "**/*.properties",
                "**/*.png",
                "**/*.jpeg",
                "**/*.jpg",
                "**/*.ico",
                "**/*.txt",
                // Minified Javascript
                "**/*min.js",
                "**/*.js",
        ])
    }

    release {
        ext.snapshotSuffix = ""
        failOnCommitNeeded = true
        failOnPublishNeeded = true
        failOnSnapshotDependencies = true
        failOnUnversionedFiles = true
        failOnUpdateNeeded = true
        revertOnFail = true
        preCommitText = ''
        preTagCommitMessage = '[RELEASE] Version '
        tagCommitMessage = 'Version '
        newVersionCommitMessage = 'New working version '
        tagTemplate = '${version}'
        versionPropertyFile = 'version.properties'
        versionProperties = []
        buildTasks = ['build']
        versionPatterns = [
                /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]

        git {
            requireBranch = 'master'
            pushToRemote = 'origin'
            pushToCurrentBranch = false
        }
    }

    if (tasks.findByPath('uploadArchives') != null) {
        afterReleaseBuild.dependsOn uploadArchives
    }

    install.doLast {
        println "ETF-BDA: Installed version ${version}"
    }
}
