/**
 * Copyright 2010-2017 interactive instruments GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.regex.Matcher
import org.gradle.internal.os.OperatingSystem;


/**
 * etf build and deployment helper for gradle
 *
 * @author J. Herrmann ( herrmann <aT) interactive-instruments (doT> de )
 */
println 'ETF-BDA: Applying ii BDA gradle script 1.0.24 to the project'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {

        // Release plugin
        classpath 'net.researchgate:gradle-release:2.5.0'

        // Code formatting and license headers plugin
        classpath 'com.diffplug.gradle.spotless:spotless:1.3.3'

        // Git plugin for version information, repo url, etc
        classpath 'org.ajoberstar:grgit:1.8.0'

        if (project.findProperty("ii.etfdev.quality.reports")=='true') {
            if(project.findProperty("versioneye.api_key")!=null ||
                    System.getenv("VERSIONEYE_API_KEY")!=null)
            {
                // Monitor dependency information (version, license, security status)
                classpath 'org.standardout:gradle-versioneye-plugin:1.4.0'
            }
        }
    }
}

// Check gradle version
/////////////////////////////////////

final GradleVersion currentGradleVersion = GradleVersion.current()
final GradleVersion requiredVersion = GradleVersion.version('3.4')
if(currentGradleVersion<requiredVersion) {
    throw new GradleException("ETF-BDA: The configured Gradle version "+currentGradleVersion+
            " in the gradle-wrapper.properties file "+
            " is too old. Required is at least "+requiredVersion.toString())
}

// Configure semantic version
/////////////////////////////////////

ext.versionFile = rootProject.file("./version.properties")

// Set and check project version
if (!ext.versionFile.exists()) {
    throw new GradleException("ETF-BDA: required file version.properties does not exist! Create it!")
}
if (!ext.versionFile.canRead()) {
    throw new GradleException("ETF-BDA: can not read file version.properties ! Check file permissions!")
}
ext.semversion = null
if( System.getenv("RELEASE_VERSION") ) {
  ext.semversion = System.getenv("RELEASE_VERSION")
}else{
  def versionProperties = new Properties()
  ext.versionFile.withInputStream {
      stream -> versionProperties.load(stream)
  }
  ext.semversion = versionProperties.version
}

if (ext.semversion == null) {
    throw new GradleException("ETF-BDA: property version not set in file version.properties or RELEASE_VERSION environment variable not defined!")
}
ext.semversion = ext.semversion.toUpperCase()

ext.nextVersion = null
if( System.getenv("RELEASE_NEXT_VERSION") ) {
    ext.nextVersion = System.getenv("RELEASE_NEXT_VERSION").toUpperCase()

}

if (hasProperty("teamcity")) {
    ext.versionBuildNumber = teamcity["build.number"]
} else if (System.getenv("BUILD_NUMBER")) {
    ext.versionBuildNumber = System.getenv("BUILD_NUMBER")
} else {
    ext.versionBuildNumber = '0'
}

def sTasks = project.gradle.startParameter.taskNames
if (ext.semversion.contains("SNAPSHOT"))
{
    if (sTasks.contains('release') || sTasks.contains('runBuildTasks')) {
        // First case applies when you call release taks, second one is one of
        // the tasks that are executed in a NEW gradle instance
        println "ETF-BDA: Ignoring SNAPSHOT handling during RELEASE task execution."
        ext.snapshotSuffix = ""
    } else {
        ext.snapshotSuffix = "-SNAPSHOT"
    }
} else {
    ext.snapshotSuffix = ""
}

// Credentials
ext.r_user = project.findProperty("ii.etfdev.repo.username") ?: 'etf-public-releases'
ext.r_pwd = project.findProperty("ii.etfdev.repo.password") ?: 'etf-public-releases'

println "ETF-BDA: Authenticating will be done as user ${ext.r_user}"

ext.qualityReports = project.hasProperty("ii.etfdev.quality.reports") &&
        project.getProperty("ii.etfdev.quality.reports") == "true"

task updateReadme {
  description 'Replace patterns found in the Readme.md'

  doLast {

    final File readmeFile = rootProject.file("./Readme.md")
    if (readmeFile.exists()) {
        final String afRepoUrl = uploadArchives.repositories.mavenDeployer.repository.url
        // snapshot url needed? uploadArchives.repositories.mavenDeployer.snapshotRepository.url
        assert afRepoUrl != null

        // Prefer zips
        final String file = uploadArchives.artifacts.files.sort()[0].name

        final String baseUrl = afRepoUrl +"/"+ rootProject.group.replace('.','/') +
                "/"+ rootProject.name +"/";

        final String completeUrl = baseUrl + rootProject.version +"/"+ file

        final String latestVersionShield = '[![Latest version]'+
                '(http://img.shields.io/badge/latest%20version-'+rootProject.version+'-blue.svg)]'+
                '('+completeUrl+')'

        String readmeText = readmeFile.text
        readmeText = readmeText.replaceFirst(
                /\[\!\[Latest version\]\(http:\/\/img\.shields\.io\/badge\/latest\%20version-.*/ ,
                latestVersionShield)
        readmeFile.write(readmeText)
    }
  }
}

task installGitHooks(type: Copy) {
    from(new File(rootProject.rootDir, './build/gradle/pre-commit'))
    destinationDir = new File(rootProject.rootDir, '.git/hooks')
    fileMode 0555
}

allprojects {

    // Default lib versions
    ext {
        // testCompile group: 'junit', name: 'junit', version: etf_junitTestVersion
        etf_junitTestVersion = '4.12'

        // testCompile group: 'ch.qos.logback', name: 'logback-classic', version: etf_logbackVersion
        etf_logbackVersion = '1.2.1'

        // compile group: 'org.slf4j', name: 'slf4j-api', version: etf_slf4jApiVersion
        etf_slf4jApiVersion = '1.7.24'

        // compile group: 'org.apache.commons', name: 'commons-lang3', version: etf_commonsLang3Version
        etf_commonsLang3Version = '3.5'

        // compile group: 'commons-codec', name: 'commons-codec', version: etf_commonsCodecVersion
        etf_commonsCodecVersion = '1.10'

        // compile group: 'commons-io', name: 'commons-io', version: etf_commonsIoVersion
        etf_commonsIoVersion = '2.5'

        // compile group: 'commons-collections', name: 'commons-collections', version: etf_commonsCollectionsVersion
        etf_commonsCollectionsVersion = '3.2.2'

        // compile group: 'xerces', name: 'xercesImpl', version: etf_xercesVersion
        etf_xercesVersion = '2.11.0.beta'

        // compile group: 'xml-apis', name: 'xml-apis', version: etf_xmlApisVersion
        etf_xmlApisVersion = '1.4.01'

        // compile group: 'net.sf.saxon', name: 'Saxon-HE', version: etf_saxonHe
        etf_saxonHe = '9.7.0-15'

        // compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: etf_jaxbVersion
        etf_jaxbVersion = '2.2.11'

        // compile group: 'de.interactive_instruments', name: 'ii-commons-util', version: etf_iiCommonsVersion
        etf_iiCommonsVersion = '2.0.0'
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    version = ext.semversion
    assert version != null

    if(ext.nextVersion != null) {
        project.setProperty("release.newVersion", ext.nextVersion)
    }

    ext.snapshotSuffix = gradle.rootProject.ext.snapshotSuffix
    assert ext.snapshotSuffix != null

    ext.versionBuildNumber = gradle.rootProject.ext.versionBuildNumber
    assert ext.versionBuildNumber != null

    ext.repo = org.ajoberstar.grgit.Grgit.open(file(project.rootDir))
    assert ext.repo != null
    ext.repoUrl = ext.repo.remote.list()[0].url

    assert gradle.rootProject.ext.r_user != null
    assert gradle.rootProject.ext.r_pwd != null

    ext.updateVersionEye = (project.findProperty("versioneye.api_key")!=null ||
            System.getenv("VERSIONEYE_API_KEY")!=null) &&
            gradle.rootProject.ext.qualityReports

    ext.spotlessJavaSrcFiles = project.fileTree(project.projectDir) {
        include 'src/main/java/de/interactive_instruments/**/*.java'
        include 'src/test/java/de/interactive_instruments/**/*.java'
        exclude '**/package-info.java'
        exclude 'apache2-license-header.java'
    }

    repositories {
        // First get modified external libraries
        maven {
            url "http://services.interactive-instruments.de/etfdev-af/ext-releases-local"
            credentials {
                username gradle.rootProject.ext.r_user
                password gradle.rootProject.ext.r_pwd
            }
        }
        maven {
            url "http://services.interactive-instruments.de/etfdev-af/ext-cache"
            credentials {
                username gradle.rootProject.ext.r_user
                password gradle.rootProject.ext.r_pwd
            }
        }
        mavenCentral()
        if (project.snapshotSuffix) {
            println "ETF-BDA: Activating local repository for SNAPSHOT version"
            mavenLocal()

            maven {
                url "https://services.interactive-instruments.de/etfdev-af/snapshot"
                credentials {
                    username gradle.rootProject.ext.r_user
                    password gradle.rootProject.ext.r_pwd
                }
            }
        } else {
            maven {
                url "https://services.interactive-instruments.de/etfdev-af/release"
                credentials {
                    username gradle.rootProject.ext.r_user
                    password gradle.rootProject.ext.r_pwd
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    if(project.hasProperty("compileJava")) {
      [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    }
    if(project.hasProperty("compileGroovy")) {
      [compileGroovy, compileGroovy]*.options*.encoding = 'UTF-8'
    }

    if (gradle.rootProject.ext.qualityReports) {
        /////////////////////////////////////
        // STATIC CODE ANALYSIS - FINDBUGS //
        /////////////////////////////////////
        apply plugin: 'findbugs'
        findbugs {
            toolVersion = "3.0.1"
            ignoreFailures = true
            reportsDir = file("$project.buildDir/reports/findbugs")
            effort = "max"
            reportLevel = "high"
        }
        findbugsMain {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }

        ////////////////////////////////
        // STATIC CODE ANALYSIS - PMD //
        ////////////////////////////////
        apply plugin: 'pmd'
        pmd {
            ignoreFailures = true
            sourceSets = [sourceSets.main]
            reportsDir = file("$project.buildDir/reports/pmd")
        }
        pmdMain {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }

        ////////////////////////////////////
        // CODE COVERAGE METRICS - JACOCO //
        ////////////////////////////////////
        apply plugin: 'jacoco'
        jacoco {
            reportsDir = file("$project.buildDir/reports/jacoco")
        }
        jacocoTestReport {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }

        //////////////////////////////////////
        // DESIGN QUALITY METRICS - JDEPEND //
        //////////////////////////////////////
        apply plugin: 'jdepend'
        jdepend {
            reportsDir = file("$project.buildDir/reports/jdepend")
        }
        jdependMain {
            reports {
                xml.enabled false
                text.enabled true
            }
        }

        //////////////////////////////////////
        // DEPENDENCY CHECKS - VersionEye //
        //////////////////////////////////////
        if(project.updateVersionEye)
        {
            apply plugin: org.standardout.gradle.plugin.versioneye.VersionEyePlugin
            versioneye {
                dependencies=declared
                includePlugins=false
                exclude 'testCompile', 'testRuntime'
            }
        }
    }

    ////////////
    // UPLOAD //
    ////////////
    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://services.interactive-instruments.de/etfdev-af/snapshot") {
                    authentication(userName: gradle.rootProject.ext.r_user, password: gradle.rootProject.ext.r_pwd)
                }
                repository(url: "http://services.interactive-instruments.de/etfdev-af/release") {
                    authentication(userName: gradle.rootProject.ext.r_user, password: gradle.rootProject.ext.r_pwd)
                }

                pom.project {
                    inceptionYear '2010'

                    url 'http://interactive-instruments.github.io/etf-webapp'

                    scm {
                        url = "${project.repoUrl}"
                        connection = "${project.repoUrl}"
                        developerConnection = "${project.repoUrl}"
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'jonherrmann'
                            organization = 'interactive instruments'
                        }
                        developer {
                            id = 'cportele'
                            organization = 'interactive instruments'
                        }
                        developer {
                            id = 'jechterhoff'
                            organization = 'interactive instruments'
                        }
                    }

                    properties {
                        'project.build.sourceEncoding' 'UTF-8'
                        'project.reporting.outputEncoding' 'UTF-8'
                    }
                }
            }
        }
    }

    //////////////
    // MANIFEST //
    //////////////
    jar.doFirst {
        manifest {
            attributes(
                    'Implementation-Title': project.name,
                    'Specification-Vendor': 'interactive instruments GmbH',
                    'Specification-Vendor-Id': 'de.interactive_instruments',
                    'Implementation-Vendor': 'interactive instruments GmbH',
                    'Implementation-Vendor-Id': 'de.interactive_instruments',
                    'Implementation-Version': project.version,
                    'Implementation-Revision': repo.head().abbreviatedId,
                    'Implementation-Build': project.versionBuildNumber,
                    'Built-By': gradle.rootProject.ext.r_user,
                    'Build-User': System.getProperty('user.name'),
                    'Build-Host': java.net.InetAddress.getLocalHost().getHostName(),
                    'Build-JDK': System.getProperty('java.version'),
                    'Build-Date': new Date().format('yyMMddHHmmss'),
                    'Build-Gradle': gradle.gradleVersion,
                    'Source-Compatibility': project.sourceCompatibility,
                    'Target-Compatibility': project.targetCompatibility,
            )
        }
    }

    ////////////////////////////////////////
    // CODE FORMATTING AND LICENSE HEADER //
    ////////////////////////////////////////
    apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin
    spotless {
        java {
            target spotlessJavaSrcFiles
            licenseHeaderFile rootProject.file('./build/gradle/apache2-license-header.java')
            importOrder(['java', 'javax', 'com', 'org', 'de'])
            eclipseFormatFile rootProject.file('./build/gradle/etf.eclipseformat.xml')
            trimTrailingWhitespace()
            // endWithNewline()

            custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
        }

        format 'groovy', {
            target '**/*.groovy'
            licenseHeaderFile rootProject.file('./build/gradle/apache2-license-header.java'), "package "
        }

        format 'misc', {
            target '**/*.md', '**/*.gitignore'
            indentWithTabs()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }


    ///////////////
    // RELEASING //
    ///////////////
    apply plugin: net.researchgate.release.ReleasePlugin
    if( System.getenv("DEVELOPMENT_VERSION") ) {
      project.ext.set("release.newVersion", System.getenv("DEVELOPMENT_VERSION"))
    }
    release {
        ext.snapshotSuffix = ""
        failOnCommitNeeded = true
        failOnPublishNeeded = true
        failOnSnapshotDependencies = true
        failOnUnversionedFiles = true
        failOnUpdateNeeded = true
        revertOnFail = true
        preCommitText = ''
        preTagCommitMessage = '[RELEASE] :new: Version '
        tagCommitMessage = 'BN-${project.versionBuildNumber}, V-'
        newVersionCommitMessage = ':arrow_up: New working version '
        tagTemplate = '${version}'
        versionPropertyFile = 'version.properties'
        versionProperties = []
        buildTasks = ['build']
        versionPatterns = [
                /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]

        git {
            requireBranch = 'master'
            pushToRemote = 'origin'
        }
    }

    if (tasks.findByPath('uploadArchives') != null) {
        beforeReleaseBuild.dependsOn updateReadme
        afterReleaseBuild.dependsOn uploadArchives
        if(project.updateVersionEye) {
            versionEyeUpdate.shouldRunAfter uploadArchives
            afterReleaseBuild.dependsOn versionEyeUpdate
        }
    }

    install.doLast {
        println "ETF-BDA: Installed version ${version}"
    }

    uploadArchives.doLast {
        println "ETF-BDA: Uploaded version ${version}"
    }

    if (!OperatingSystem.current().isWindows()) {
        build.dependsOn installGitHooks
    }
}
